/*
  Filename   : ArrayDriver.cc
  Author     : Leandro Martinez
  Course     : CSCI 362-01
  Assignment : N/A
  Description: Test methods of the Array class
*/   

/************************************************************/
// System includes

#include <cstdlib>
#include <iostream>
#include <string>
#include <iterator>
#include <sstream>
#include <cassert>

/************************************************************/
// Local includes

#include "Array.hpp"

/************************************************************/
// Using declarations

using std::cin;
using std::cout;
using std::endl;
using std::ostream_iterator;
using std::string;
using std::ostringstream;

/************************************************************/
// Function prototypes/global vars/typedefs

void
printTestResult (const string& test,
		 const string& expected,
		 const ostringstream& actual);

void
print (Array<int> A);

void
destructorTest(Array <int> A);

/************************************************************/

int      
main (int argc, char* argv[]) 
{        
  Array<int> A (3);

  // For holding the actual result
  ostringstream output;
  // Put the actual result into the output stream
  output << A;
  printTestResult ("size ctor", "[ 0 0 0 ]", output);

  A.push_back (5);
  A.push_back (10);
  A.push_back (15);

  // Must clear the output stream each time
  output.str ("");
  output << A;
  printTestResult ("push_back", "[ 0 0 0 5 10 15 ]", output);

  output.str ("");
  output << A.size ();
  printTestResult ("size", "6", output);
  
  A.pop_back ();
  A.pop_back ();

  output.str ("");
  output << A;
  printTestResult ("pop_back", "[ 0 0 0 5 ]", output);

  // Convert rest of code to use printTestResult
  //   and add your own tests
  for (int i = 0; i < 10; ++i)
  {
    A.insert (A.begin (), i);
  }
  cout << "Inserted 9 8 ... 0 at beginning\n";
  print (A);
  cout << endl;

  for (Array<int>::iterator i = A.begin (); i != A.end (); )
  {
    i = A.erase (i);
  }
  cout << "Erased all elements of A\n";
  print (A);
  cout << endl;

  Array<int> B (3, 9);
  cout << "B (3, 9): 3 9's\n";
  print (B);
  cout << endl;

  Array<int> C (B.begin (), B.begin () + 2);
  cout << "C (B.begin (), B.begin () + 2): 9 9\n";
  print (C);
  cout << endl;
  
  B = A;
  cout << "B = A: empty\n";
  print (B);
  cout << endl;

  cout << "Inserting 0, 1, 2, 3, 4 at beginning of B\n";
  for (int i = 0; i < 5; ++i)
    B.insert (B.begin (), i);
  print (B);
  cout << endl;

  cout << "Printing B using the output operator\n";
  cout << B << endl;
  cout << endl;

  output.str("");
  Array<int> D;
  output<< D;
  printTestResult("Default constructor", "[ ]", output);

  D.push_back(15);
  D.push_back(10);
  D.push_back(5);

  Array<int> E(D.begin(), D.end());
  output.str("");
  output<< E;
  printTestResult("Range Constructor", "[ 15 10 5 ]", output);

  destructorTest(D);
  cout<< endl;
  cout<< "Destructor worked";
  cout<<endl;

  Array<int> F;
  for(int i = 0; i < 6; i++){
    cout<< F.capacity();
    cout<<endl;
    F.push_back(1);
  }

  output.str("");
  output<< F.capacity();
  printTestResult("Capacity test", "8", output);
    

  
  return EXIT_SUCCESS;
}

/************************************************************/

void
printTestResult (const string& test,
		 const string& expected,
		 const ostringstream& actual)
{
  cout << "Test: " << test << endl;
  cout << "==========================" << endl;
  cout << "Expected: " << expected << endl;
  cout << "Actual  : " << actual.str () << endl;
  cout << "==========================" << endl << endl;

  // Ensure the two results are the same
  assert (expected == actual.str ());
}

/************************************************************/

// Copy ctor will get called as A is passed by value
void
print (Array<int> A) 
{
  cout << "[ ";
  // Using a for-each loop, which employs iterators
  for (const auto& e : A)
  {
    cout << e << " ";
  }
  cout << "]";
}

/************************************************************/
// Testing the destructor
void
destructorTest(Array<int> A)
{
  cout<< A;
  
}
