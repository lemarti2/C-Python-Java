/*
  Filename   : ListDriver.cc
  Author     : Leandro Martinez
  Course     : CSCI 362-01
  Assignment : N/A
  Description: Test methods of the List class
*/   

/************************************************************/
// System includes

#include <cstdlib>
#include <iostream>
#include <string>
#include <iterator>
#include <sstream>
#include <cassert>

/************************************************************/
// Local includes

#include "List.hpp"

/************************************************************/
// Using declarations

using std::cin;
using std::cout;
using std::endl;
using std::ostream_iterator;
using std::string;
using std::ostringstream;

/************************************************************/
// Function prototypes/global vars/typedefs

void
printTestResult (const string& test,
		 const string& expected,
		 const ostringstream& actual);

/************************************************************/

int
main (int argc, char *argv[])
{
  List<int> A;

  // For holding the actual result
  ostringstream output;
  // Put the actual result into the output stream
  output << A;
  printTestResult ("no-arg ctor", "[ ]", output);

  // Must clear the output stream each time
  output.str ("");
  output << A.size ();
  printTestResult ("size", "0", output);
  
  List<int> B (3, 8);
  //std :: cout << B;
  output.str ("");
  output << B;
  printTestResult ("size ctor", "[ 8 8 8 ]", output);

  output.str ("");
  output << B.empty();
  printTestResult (" is_empty", "0", output);

  B.push_back(2);
  B.push_front(4);
  output.str ("");
  output << B;
  printTestResult (" push methods", "[ 4 8 8 8 2 ]", output);
  
  B.pop_front();
  B.pop_back();
  output.str("");
  output << B;
  printTestResult (" pop methods", "[ 8 8 8 ]", output);

  output.str("");
  output << B.size();
  printTestResult (" size ", "3", output);

  B.push_back(2);
  B.push_front(4);
  output.str("");
  output << B.front();
  printTestResult( " front ", "4", output);

  output.str("");
  output << B.back();
  printTestResult( " back ", "2", output);

  output.str("");
  B.insert(B.begin(), 5);
  output << B;
  printTestResult("insert and begin ", "[ 5 4 8 8 8 2 ]", output);

  output.str("");
  B.insert(B.end(), 3);
  output << B;
  printTestResult("insert and end ", "[ 5 4 8 8 8 2 3 ]", output);

  output.str("");
  B.insert(++B.begin(), 7);
  output << B;
  printTestResult("insert", "[ 5 7 4 8 8 8 2 3 ]", output);

  
  output.str("");
  B.erase(--B.end());
  output << B;
  printTestResult("erase and end ", "[ 5 7 4 8 8 8 2 ]", output);
  

  output.str("");
  B.erase(B.begin());
  output << B;
  printTestResult("erase and begin ", "[ 7 4 8 8 8 2 ]", output);


  output.str("");
  B.erase(++B.begin());
  output << B;
  printTestResult("erase", "[ 7 8 8 8 2 ]", output);

  output.str("");
  B.erase(B.begin(),--(--B.end()));
  output << B;
  printTestResult("erase range ", "[ 8 2 ]", output);

  List<int> C{3, 6, 7, 9};
  output.str("");
  output << C;
  printTestResult("List Initializer", "[ 3 6 7 9 ]", output);

  //List<int> D(;
  //output.str("");
  //output << D;
  //printTestResult("Copy Ctor", "[ 3 6 7 9]", output);

  
  return EXIT_SUCCESS;
}

/************************************************************/

void
printTestResult (const string& test,
		 const string& expected,
		 const ostringstream& actual)
{
  cout << "Test: " << test << endl;
  cout << "==========================" << endl;
  cout << "Expected: " << expected << endl;
  cout << "Actual  : " << actual.str () << endl;
  cout << "==========================" << endl << endl;

  // Ensure the two results are the same
  assert (expected == actual.str ());
}

/************************************************************/
